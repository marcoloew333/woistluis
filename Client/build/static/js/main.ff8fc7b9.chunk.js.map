{"version":3,"sources":["Header.js","Form.js","Bets.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Form","state","bet","person_name","time_bet","isHidden","addBet","_","_this","fetch","concat","then","response","json","alert","getBets","catch","err","console","error","this","setState","_this2","htmlFor","id","value","onChange","e","Object","objectSpread","target","onClick","toggleHidden","Form_Child","Component","Child","Bets","bets","data","renderBets","_ref","bet_id","name","key","map","App","src_Header_0","src_Form_0","src_Bets_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff8fc7b9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => {\n    return(\n        <div className=\"header\">\n            <p>Wo Ist Luis?</p>\n        </div>\n    )\n};\n\nexport default Header","import React, { Component } from \"react\";\nimport \"./Form.css\";\n\nclass Form extends Component {\n\n    state = {\n        bet: {\n            person_name: \"Peter Pan\",\n            time_bet: \"10:17 Uhr\"\n        },\n        isHidden: true\n    };\n\n    toggleHidden () {\n        this.setState({\n            isHidden: !this.state.isHidden\n        })\n    }\n\n    addBet = _ => {\n\n        const { bet } = this.state;\n\n        fetch(`http://ec2-54-157-54-3.compute-1.amazonaws.com/bets/add?name=${bet.person_name}&bet=${bet.time_bet}`)//http://ec2-54-157-54-3.compute-1.amazonaws.com //localhost:4000 //?name=${bet.person_name}&bet=${bet.time_bet}\n            .then(response => response.json())\n            .then(alert(\"Wette wurde angenommen\"))\n            .then(this.getBets)\n            .catch(err => console.error(err))\n    };\n\n    render() {\n        const { bet } = this.state;\n        return (\n            <div className=\"form-container\">\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    id=\"name\"\n                    className=\"name-input\"\n                    value={bet.person_name}\n                    onChange={e => this.setState({bet: { ...bet, person_name: e.target.value}})}\n                />\n                <label htmlFor=\"bet\">GeschÃ¤tzte Ankunftszeit</label>\n                <input\n                    id=\"bet\"\n                    className=\"bet-input\"\n                    value={bet.time_bet}\n                    onChange={e => this.setState({bet: { ...bet, time_bet: e.target.value}})}\n                />\n                <button onClick={()=>{ this.addBet(); this.toggleHidden() }}>Wette abgeben</button>\n                {!this.state.isHidden && <Child />}\n            </div>\n        )\n    }\n}\n\nconst Child = () => (\n    <div className='modal'>\n        Hello, World!\n    </div>\n);\n\nexport default Form","import React, { Component } from \"react\";\nimport \"./Bets.css\";\n\nclass Bets extends Component {\n\n    state = {\n        bets: []\n    };\n\n    componentDidMount() {\n        this.getBets();\n    }\n\n    getBets = _ => {\n        fetch(\"http://ec2-54-157-54-3.compute-1.amazonaws.com/bets\") //http://ec2-54-157-54-3.compute-1.amazonaws.com //localhost:4000\n            .then(response => response.json())\n            .then(response => this.setState({bets: response.data}))\n            .catch(err => console.error(err))\n    };\n\n    renderBets = ({ bet_id, name, bet }) =>\n        <div className=\"bet-entry\" key={bet_id}>\n            <p className=\"name\">{name}</p>\n            <p>{bet}</p>\n        </div>;\n\n    render() {\n        const { bets } = this.state;\n        return (\n            <div className=\"bet-container\">\n                {bets.map(this.renderBets)}\n            </div>\n        )\n    }\n}\n\nexport default Bets\n","import React, { Component } from \"react\";\nimport './App.css';\nimport \"./Header\"\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Bets from \"./Bets\";\n\nclass App extends Component {\n\n  // state = {\n  //   bets: [],\n  //   bet: {\n  //     person_name: \"Peter Pan\",\n  //     time_bet: \"10:17 Uhr\"\n  //   }\n  // };\n\n  // componentDidMount() {\n  //   this.getBets();\n  // }\n  //\n  // getBets = _ => {\n  //   fetch(\"http://ec2-54-157-54-3.compute-1.amazonaws.com/bets\")\n  //       .then(response => response.json())\n  //       .then(response => this.setState({bets: response.data}))\n  //       .catch(err => console.error(err))\n  // };\n  //\n  // addBet = _ => {\n  //   const { bet } = this.state;\n  //\n  //   fetch(`http://ec2-54-157-54-3.compute-1.amazonaws.com/bets/add?name=${bet.person_name}&bet=${bet.time_bet}`)\n  //       .then(response => response.json())\n  //       .then(this.getProducts)\n  //       .catch(err => console.error(err) + \"penis\")\n  // };\n\n  // renderBets = ({ bet_id, name, bet}) =>\n  //     <div key={bet_id}>\n  //       <p>{name}</p>\n  //       <p>{bet}</p>\n  //     </div>;\n\n    render() {\n    // const { bets, bet } = this.state;\n\n        return (\n            <div>\n                <Header />\n                <div className=\"content\">\n                    <Form />\n                    <Bets />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}