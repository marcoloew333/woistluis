{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","bets","bet","person_name","time_bet","real_time","isHidden","getBets","_","fetch","then","response","json","_this","setState","data","catch","err","console","error","addBet","concat","renderBets","_ref","bet_id","name","timestamp","react_default","a","createElement","className","key","setArrivalTime","this","_this2","_this$state","htmlFor","id","value","onChange","e","Object","objectSpread","target","onClick","toggleHidden","App_BetSuccess","App_ArrivalTime","map","Component","BetSuccess","ArrivalTime","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fba5986.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n        bets: [],\n        bet: {\n          person_name: \"Peter Pan\",\n          time_bet: \"10:17 Uhr\"\n        },\n        real_time: \"\",\n        isHidden: true\n    };\n\n    componentDidMount() {\n    this.getBets();\n    }\n\n    toggleHidden () {\n        this.setState({\n            isHidden: !this.state.isHidden\n        })\n    }\n\n    getBets = _ => {\n    fetch(\"http://ec2-54-157-54-3.compute-1.amazonaws.com/bets\")\n        .then(response => response.json())\n        .then(response => this.setState({bets: response.data}))\n        .catch(err => console.error(err))\n    };\n\n\n\n    addBet = _ => {\n    const { bet } = this.state;\n\n    fetch(`http://ec2-54-157-54-3.compute-1.amazonaws.com/bets/add?name=${bet.person_name}&bet=${bet.time_bet}`)\n        .then(response => response.json())\n        .then(this.getBets)\n        .catch(err => console.error(err))\n    };\n\n    renderBets = ({ bet_id, name, bet, timestamp}) =>\n            <div className=\"bet-entries\" key={bet_id}>\n                <p>{name}</p>\n                <p>{bet}</p>\n                <p>{timestamp}</p>\n            </div>;\n\n    setArrivalTime = () => {\n\n    };\n\n    render() {\n    const { bets, bet } = this.state;\n\n        return (\n            <div className=\"app-container\">\n                <div className=\"header\">\n                    <h1>Wo Ist Luis?</h1>\n                </div>\n                <div className=\"content\">\n                    <div className=\"form-container\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input\n                            id=\"name\"\n                            className=\"name-input\"\n                            value={bet.person_name}\n                            onChange={e => this.setState({bet: { ...bet, person_name: e.target.value}})}\n                        />\n                        <label htmlFor=\"bet\">Geschätzte Ankunftszeit</label>\n                        <input\n                            id=\"bet\"\n                            className=\"bet-input\"\n                            value={bet.time_bet}\n                            onChange={e => this.setState({bet: { ...bet, time_bet: e.target.value}})}\n                        />\n                        <button onClick={()=>{ this.addBet(); this.toggleHidden(); this.getBets() }}>Wette abgeben</button>\n                        {!this.state.isHidden && <BetSuccess />}\n                        <p>Um deine Wette zu aktualisieren, einfach mit deinem Namen neu wetten.</p>\n                        <div className=\"luis\">\n                            <p>Tatsächliche Ankunftszeit</p>\n                            <label>Ankunftszeit</label>\n                            <input\n                                id=\"real-time\"\n                                className=\"real-time\"\n                                value=\"25:13 Uhr\"\n                                onChange={e => this.setState({real_time: e.target.value})}\n                            />\n                            <label>Passwort</label>\n                            <input\n                                id=\"pw\"\n                                className=\"luis-pw\"\n                                value=\"passwort\"\n                            />\n                            <button onClick={() => {}}>Ankunftszeit eintragen</button>\n                        </div>\n                        <ArrivalTime/>\n                    </div>\n                    <div className=\"bet-container\">\n                        <div className=\"column-titles\">\n                            <p>Name</p>\n                            <p>Zeit</p>\n                            <p>Timestamp</p>\n                        </div>\n                        {bets.map(this.renderBets)}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst BetSuccess = () => (\n    <div className='modal'>\n        <p>Wette erfolgreich eingetragen.</p>\n    </div>\n);\n\nconst ArrivalTime = () => (\n    <div>\n        <p>Ankunftszeit: {this.state.real_time}</p>\n    </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}